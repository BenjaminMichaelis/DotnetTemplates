name: Deploy

on:
  release:
    types: [created]
  workflow_dispatch:
  schedule:
    - cron: '35 17 * * *'

defaults:
  run:
    shell: pwsh

jobs:
  check-for-changes:
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.check.outputs.changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        id: check
        run: |
          try {
            # Get the latest published date of the NuGet package
            $packageInfo = Invoke-RestMethod -Uri "https://api.nuget.org/v3/registration5-gz-semver2/benjaminmichaelis.dotnet.templates/index.json"
            $latestVersion = $packageInfo.items[0].items | Sort-Object { [version]$_.catalogEntry.version } | Select-Object -Last 1
            $lastPublishedDate = [DateTime]::Parse($latestVersion.catalogEntry.published)
            
            Write-Host "Latest NuGet package version: $($latestVersion.catalogEntry.version)"
            Write-Host "Last published date: $lastPublishedDate"
            
            # Get the latest commit date
            $latestCommitDate = [DateTime]::Parse((git log -1 --format=%ci))
            Write-Host "Latest commit date: $latestCommitDate"
            
            # Check if there are commits newer than the last published package
            if ($latestCommitDate -gt $lastPublishedDate) {
              Write-Host "Repository has changes newer than the last published package"
              "changes=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            } else {
              Write-Host "No changes since last published package"
              "changes=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            }
          } catch {
            Write-Host "Error checking NuGet package date: $($_.Exception.Message)"
            Write-Host "Falling back to checking for changes in the last 24 hours"
            $hasChanges = git log --since="24 hours ago" --oneline
            if ($hasChanges) {
              "changes=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            } else {
              "changes=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            }
          }

  build-and-pack:
    if: needs.check-for-changes.outputs.changes == 'true'
    name: Build and Pack
    runs-on: ubuntu-latest
    needs: check-for-changes
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Set Version
        run: |
          git fetch --tags
          echo "${{ github.ref }}"
          $tagVersion = "${{ github.ref }}".substring(11)
          if ("${{ github.event_name }}" -eq "schedule") {
            $tagVersion = & git describe --tags --abbrev=0
            $tagVersion = "$tagVersion-${{ github.run_number }}"
          }
          echo "buildVersion=$tagVersion.${{ github.run_number }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "nugetVersion=$tagVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "preRelease=false" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Pack
        if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'schedule'
        run: dotnet pack -p:PackageVersion=${{ env.nugetVersion }} --configuration Release -o ${{ github.workspace }}/BenjaminMichaelis.PackedTemplates

      - name: Upload Artifacts
        if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'schedule'
        uses: actions/upload-artifact@v4
        with:
          name: NuGet
          path: ${{ github.workspace }}/BenjaminMichaelis.PackedTemplates

  deploy:
    if: needs.check-for-changes.outputs.changes == 'true'
    runs-on: ubuntu-latest
    needs: build-and-pack
    environment:
      name: "Production"
      url: "https://www.nuget.org/packages/BenjaminMichaelis.Dotnet.Templates"
    name: Push NuGets

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: NuGet

      - name: Push NuGet
        run: |
          $tagVersion = "${{ github.ref }}".substring(11)
          if ( "${{ github.event_name }}" == "schedule" || "${{ github.event_name }}" == "push" ) {
            $tagVersion = & git describe --tags --abbrev=0
            $tagVersion = "$tagVersion-${{ github.run_number }}"
          }
          echo "TAG_VERSION=$tagVersion" >> $env:GITHUB_OUTPUT
          dotnet nuget push BenjaminMichaelis.Dotnet.Templates.$tagVersion.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate
        id: tag-version
